#
# This file is part of gtkD.
#
# gtkD is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# gtkD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with gtkD; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

#############################################
### Definitions for wrapping Gtk+ ###########
#############################################

# must start with wrap
wrap: gtk
file: Gtk-4.0.gir

struct: Builder
#There are now 3 constructors that have a single string parameter, disable 2 of them.
noCode: new_from_resource
noCode: new_from_string

noCode: get_objects
import: glib.ListSG
code: start
	/**
	 * Gets all objects that have been constructed by @builder. Note that
	 * this function does not increment the reference counts of the returned
	 * objects.
	 *
	 * Returns: a newly-allocated #GSList containing all the objects
	 *     constructed by the #GtkBuilder instance. It should be freed by
	 *     g_slist_free()
	 */
	public ObjectG[] getObjects()
	{
		auto __p = gtk_builder_get_objects(gtkBuilder);

		if(__p is null)
		{
			return null;
		}

		return new ListSG(cast(GSList*) __p).toArray!ObjectG();
	}
code: end

struct: Button
noCode: new_from_icon_name
noCode: new_with_label

struct: CellView
noCode: new_with_text

struct: CheckButton
noCode: new_with_label

struct: ComboBox
import: glib.ConstructionException
noCode: new
noCode: new_with_entry
noCode: new_with_model
noCode: new_with_model_and_entry
code: start
	/**
	 * Creates a new empty GtkComboBox.
	 * Params:
	 *   entry = If true, create an empty ComboBox with an entry.
	 * Throws: ConstructionException GTK+ fails to create the object.
	 */
	public this (bool entry=true)
	{
		GtkComboBox* __p;
		if ( entry )
		{
			// GtkWidget* gtk_combo_box_new_text (void);
			__p = cast(GtkComboBox*)gtk_combo_box_new_with_entry();
		}
		else
		{
			// GtkWidget* gtk_combo_box_new (void);
			__p = cast(GtkComboBox*)gtk_combo_box_new();
		}

		if(__p is null)
		{
			throw new ConstructionException("null returned by gtk_combo_box_new");
		}

		this(__p);
	}


	/**
	 * Creates a new GtkComboBox with the model initialized to model.
	 * Params:
	 *   model = A GtkTreeModel.
	 *   entry = If true, create an empty ComboBox with an entry.
	 * Throws: ConstructionException GTK+ fails to create the object.
	 */
	public this (TreeModelIF model, bool entry=true)
	{
		GtkComboBox* __p;
		if ( entry )
		{
			// GtkWidget* gtk_combo_box_new_with_model_and_entry (GtkTreeModel *model);
			__p = cast(GtkComboBox*)gtk_combo_box_new_with_model_and_entry((model is null) ? null : model.getTreeModelStruct());
		}
		else
		{
			// GtkWidget* gtk_combo_box_new_with_model (GtkTreeModel *model);
			__p = cast(GtkComboBox*)gtk_combo_box_new_with_model((model is null) ? null : model.getTreeModelStruct());
		}

		if(__p is null)
		{
			throw new ConstructionException("null returned by gtk_combo_box_new");
		}

		this(__p);
	}
code: end

struct: ComboBoxText
import: glib.ConstructionException
noCode: new
noCode: new_with_entry
code: start
	/**
	 * Creates a new ComboBoxText, which is a ComboBox just displaying strings.
	 * Params:
	 *   entry = If true, create an ComboBox with an entry.
	 * Throws: ConstructionException GTK+ fails to create the object.
	 */
	public this (bool entry=true)
	{
		GtkComboBoxText* __p;
		if ( entry )
		{
			// GtkWidget* gtk_combo_box_text_new_with_entry (void);
			__p = cast(GtkComboBoxText*)gtk_combo_box_text_new_with_entry();
		}
		else
		{
			// GtkWidget* gtk_combo_box_text_new (void);
			__p = cast(GtkComboBoxText*)gtk_combo_box_text_new();
		}

		if(__p is null)
		{
			throw new ConstructionException("null returned by gtk_combo_box_new");
		}

		this(__p);
	}
code: end

struct: Expander
noCode: new

struct: FontChooser
override: get_font_map
override: set_font_map

struct: Image
noCode: new_from_icon_name
noCode: new_from_resource

struct: Label
noCode: new

struct: MediaFile
noCode: new_for_resource

struct: MenuButton
alias: set_direction setMenuDirection
alias: get_direction getMenuDirection

struct: Native
alias: realize realizeNative
alias: unrealize unrealizeNative

struct: Picture
noCode: new_for_resource

struct: Root
alias: get_display getDisplayRoot

struct: ToggleButton
noCode: new_with_label

struct: TreePath
noCode: new
noCode: new_first
code: start
	/**
	 * Creates a new GtkTreePath. This structure refers to a row.
	 * Params:
	 * firstRow = if true this is the string representation of this path is "0"
	 * Throws: ConstructionException GTK+ fails to create the object.
	 */
	public this (bool firstRow=false)
	{
		GtkTreePath* __p;

		if ( firstRow )
		{
			// GtkTreePath* gtk_tree_path_new_first (void);
			__p = cast(GtkTreePath*)gtk_tree_path_new_first();
		}
		else
		{
			// GtkTreePath* gtk_tree_path_new (void);
			__p = cast(GtkTreePath*)gtk_tree_path_new();
		}

		if(__p is null)
		{
			throw new ConstructionException("null returned by gtk_tree_path_new()");
		}

		this(__p);
	}
code: end

struct: Video
noCode: new_for_resource
